@page "/movies/{id:int}/edit/"

<h1>Editar película</h1>

@using BlazorApp.Data
@using BlazorApp.Data.Models
@inject MemoryDatabase MemoryDatabase
@inject NavigationManager NavigationManager

<form>
    <div class="form-group">
        <label for="title">Título</label>
        <input type="text" class="form-control" id="title" @bind="currentMovie.Title" />
    </div>
    <div class="form-group">
        <label for="director">Director</label>
        <input type="text" class="form-control" id="director" @bind="currentMovie.Director" />
    </div>
    <div class="form-group">
        <label for="releaseYear">Año de lanzamiento</label>
        <input type="text" class="form-control" id="releaseYear" @bind="currentMovie.ReleaseYear" />
    </div>

    <div class="form-group">
        <label for="Category">Category</label>
        <select class="form-control" value="@SelectedCategoryId" @onchange="ChangeCategory" >
            <option disable selected value="">Select Category</option>
            @foreach (var category in Categories)
            {
                <option value="@category.Id" selected="@(category.Id==SelectedCategoryId)" >
                    @category.Name
                </option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="actor">Select Actors</label>
        <select multiple class="form-control" id="actos" @onchange="ChangeActors" >
            @foreach (var actor in actors)
            {
                <option value="@actor.Id" selected="@currentMovie.hasActor(@actor.Id)" >
                    @actor.Name
                </option>
            }
        </select>
    </div>
   
    
    <button type="button" class="btn btn-primary" @onclick="SaveChanges">Guardar cambios</button>
    <a href="/movies">Cancelar</a>
</form>

@code {
    [Parameter]
    public int Id { get; set; }
    private Movie? currentMovie;
    private List<Category>? Categories;
    private int SelectedCategoryId;

    private List<Actor>? actors;
    private string[] selectedActorsIds;

    protected override void OnInitialized()
    {
        currentMovie = MemoryDatabase.FindMovie(Id);
        Categories = MemoryDatabase.Categories;
        if (currentMovie.Category != null){
            SelectedCategoryId = currentMovie.Category.Id;
        }
        actors = MemoryDatabase.Actors;
    }

    private void SaveChanges()
    {
        MemoryDatabase.UpdateMovie(currentMovie);

        NavigationManager.NavigateTo("/movies");
    }

    public void ChangeCategory(ChangeEventArgs e)
    {
        int catId = int.Parse(e.Value.ToString());
        currentMovie.Category = MemoryDatabase.FindCategory(catId);
    }

    public void ChangeActors(ChangeEventArgs e)
    {
        var actorsIdsString = (string[])e.Value;
        var actors = new List<Actor>();
        foreach (var stringId in actorsIdsString)
        {
            var actor = MemoryDatabase.FindActor(int.Parse(stringId));
            actors.Add(actor);
        }
        currentMovie.Actors = actors;
    }
    
}